#include "stdafx.h"
#include <iostream>
#include <string>
using namespace std;

// // 父类
//class Father {
//public:
//	int A;
//protected:
//	int B;
//private:
//	int C;
//};
// //公有继承
//class Son1 : public Father {
//	void func() {
//		A = 1;      // 父类中的 公共 权限，到了子类中依然是 公共 权限
//		B = 1;      // 父类中的 保护 权限，到了子类中依然是 保护 权限
//		//C = 1;    // 父类中的 私有 权限，子类访问不到
//	}
//};
//void test01() {
//	Son1 s1;
//	s1.A = 2;
//	//s1.B = 2;     // 保护属性类外不可访问
//}
// //保护继承
//class Son2 : protected Father {
//	void func() {
//		A = 1;      // 父类中的 公共 权限，到了子类中变为 保护 权限
//		B = 1;      // 父类中的 保护 权限，到了子类中依然是 保护 权限
//		//C = 1;    // 父类中的 私有 权限，子类访问不到
//	}
//};
//void test02() {
//	Son2 s2;
//	//s2.A = 2;      // 保护属性类外不可访问
//	//s2.B = 2;      // 保护属性类外不可访问
//}
//// 私有继承
//class Son3 : private Father {
//	void func() {
//		A = 1;       // 父类中的 公共 权限，到了子类中变为 私有 权限
//		B = 1;       // 父类中的 保护 权限，到了子类中变为 私有 权限
//		//C = 1;     // 父类中的 私有 权限，子类访问不到
//	}
//};
//void test03() {
//	Son3 s3;
//	//s3.A = 2;      // 私有属性类外不可访问
//	//s3.B = 2;      // 私有属性类外不可访问
//}
//
//class Human {
//public:
//	int A;
//protected:
//	int B;
//private:
//	int C;           // 私有属性只是被隐藏了，但还是会继承下去
//};
//class Person : public Human {
//public:
//	int D;
//};
//void test05() {
//	cout << "size of Person: " << sizeof(Person) << endl;   // 16
//}
//class Base {
//public:
//	Base() {
//		cout << "Base 构造函数" << endl;
//	}
//	~Base() {
//		cout << "Base 析构函数" << endl;
//	}
//};
//class Sub : public Base {
//public:
//	Sub() {
//		cout << "Sub 构造函数" << endl;
//	}
//	~Sub() {
//		cout << "Sub 析构函数" << endl;
//	}
//};
//void test06() {
//	Sub sb;
//}
//class Basic {
//public:
//	Basic() {
//		A = 1;
//	}
//	void func() {
//		cout << "Basic -- func()调用" << endl;
//	}
//	void func(int a) {
//		cout << "Basic -- func(int a)调用" << endl;
//	}
//	int A;
//};
//class Inherit :public Basic {
//public:
//	Inherit() {
//		A = 2;
//	}
//	void func() {
//		cout << "Inherit -- func()调用" << endl;
//	}
//	int A;
//};
//void test07() {
//	Inherit ih;
//	cout << "Inherit 下的 A = " << ih.A << endl;      // 2       子类直接访问
//	cout << "Basic 下的 A = " << ih.Basic::A << endl; // 1       父类加作用域
//	ih.func();             // 子类直接访问
//	ih.Basic::func();      // 父类加作用域
//	//ih.func(100);       报错原因：如果子类中出现和父类同名的成员函数，子类的同名成员会隐藏掉父类中所有同名函数
//	ih.Basic::func(100);
//}
//class Father {
//public:
//	static int A;       // 类内声明
//	static void func() {
//		cout << "Father -- func()" << endl;
//	}
//	static void func(int a) {
//		cout << "Father -- func(int a)" << endl;
//	}
//};
//int Father::A = 100;    // 类外初始化
//class Son :public Father {
//public:
//	static int A;       // 类内声明
//	static void func() {
//		cout << "Son -- func()" << endl;
//	}
//};
//int Son::A = 200;       // 类外初始化
//void test08() {
//	// 同名静态成员变量
//		// 通过对象访问
//	cout << "通过对象访问" << endl;
//	Son s1;
//	cout << "Son's A = " << s1.A << endl;              // 200
//	cout << "Father's A = " << s1.Father::A << endl;   // 100
//		// 通过类名访问
//	cout << "通过类名访问" << endl;
//	cout << "Son's A = " << Son::A << endl;              // 200
//			// 第一个::代表通过类名访问，第二个::代表访问父类作用域下的成员
//	cout << "Father's A = " << Son::Father::A << endl;   // 100
//	// 同名静态成员函数
//		//通过对象访问
//	cout << "通过对象访问" << endl;
//	Son s2;
//	s2.func();
//	s2.Father::func();
//		// 通过类名访问
//	cout << "通过类名访问" << endl;
//	Son::func();
//	Son::Father::func();
//	Son::Father::func(100);
//}
//class Base1 {
//public:
//	Base1() {
//		A = 100;
//	}
//	int A;
//};
//class Base2 {
//public:
//	Base2() {
//		A = 200;
//	}
//	int A;
//};
//class Inherit :public Base1, public Base2 {
//public:
//	Inherit() {
//		C = 300;
//		D = 400;
//	}
//	int C;
//	int D;
//};
//void test09() {
//	Inherit ih;
//	cout << "sizeof Inherit: " << sizeof(Inherit) << endl;   // 16
//	cout << "Base1 :: A: " << ih.Base1::A << endl;           // 100
//	cout << "Base2 :: A: " << ih.Base2::A << endl;           // 200
//}
/*
A
/ \
B   C
\ /
D
*/
//class A{
//public:
//	int Age;
//};
//// 利用虚继承可以解决菱形继承中资源浪费的问题，此时A被称为虚基类
//class B:virtual public A{};
//class C:virtual public A{};
//class D :public B, public C {};
//void test10() {
//	D d;
//	d.B::Age = 10;
//	d.C::Age = 20;
// //当菱形继承时，两个父类具有相同的数据，需要指明作用域加以区分
//	cout << "B::Age = " << d.B::Age << endl;
//	cout << "C::Age = " << d.C::Age << endl;
//	// 这份数据我们只需要一份就可以，菱形继承下产生了两份数据，导致资源浪费(虚继承可以解决)
//	cout << "Age: " << d.Age << endl;
//}


//// 多态
//// 动物类
//class Animal {
//public:
//	// 虚函数
//	virtual void speak() {
//		cout << "animals are speaking" << endl;
//	}
//};
//// 猫类
//class Cat :public Animal {
//public:
//	// 重写 --> 函数返回值，函数名，参数列表 完全相同
//	void speak() {
//		cout << "cat is speaking" << endl;
//	}
//};
/////> 执行说话的函数
//void doSpeak(Animal& animal) {    // Animal& animal = cat;
//	animal.speak();
//}
//void test01() {
//	Cat cat;
//	doSpeak(cat);
//}
//void test02() {
//	cout << "sizeof Animal: " << sizeof(Animal) << endl;
//}

//// 计算机普通实现
//class Calculator {
//public:
//	// 如果想增加功能，需要修改源码
//	// 实际开发中提倡开闭原则，即对扩展进行开发，对修改进行关闭
//	int getResult(string oper) {
//		if (oper == "+")
//		{
//			return Num1 + Num2;
//		}
//		if (oper == "-")
//		{
//			return Num1 - Num2;
//		}
//		if (oper == "*")
//		{
//			return Num1 * Num2;
//		}
//		
//	}
//	int Num1;
//	int Num2;
//};
//
//// 利用多态实现计算器
//class AbstractCalculator {
//public:
//	virtual int getResult() {
//		return 0;
//	}
//	int Num1;
//	int Num2;
//};
//// 加
//class AddCalculator :public AbstractCalculator {
//public:
//	virtual int getResult() {
//		return Num1 + Num2;
//	}
//};
//// 减
//class SubCalculator :public AbstractCalculator {
//public:
//	virtual int getResult() {
//		return Num1 - Num2;
//	}
//};
//// 乘
//class MulCalculator :public AbstractCalculator {
//public:
//	virtual int getResult() {
//		return Num1 * Num2;
//	}
//};
//void test01() {
//	Calculator cal;
//	cal.Num1 = 10;
//	cal.Num2 = 20;
//	cout << "cal.Num1 + cal.Num2 = " << cal.getResult("+") << endl;
//	cout << "cal.Num1 - cal.Num2 = " << cal.getResult("-") << endl;
//	cout << "cal.Num1 * cal.Num2 = " << cal.getResult("*") << endl;
//}
//void test02() {
//	// 多态使用条件 --> 父类指针或者引用指向子类对象
//	// 加
//	AbstractCalculator* abc = new AddCalculator;
//	abc->Num1 = 10;
//	abc->Num2 = 20;
//	cout << abc->Num1 << "+" << abc->Num2 << "=" << abc->getResult() << endl;
//	delete abc;
//	// 减
//	abc = new AddCalculator;
//	abc->Num1 = 10;
//	abc->Num2 = 20;
//	cout << abc->Num1 << "+" << abc->Num2 << "=" << abc->getResult() << endl;
//	delete abc;
//	// 乘
//	abc = new AddCalculator;
//	abc->Num1 = 10;
//	abc->Num2 = 20;
//	cout << abc->Num1 << "+" << abc->Num2 << "=" << abc->getResult() << endl;
//	delete abc;
//	abc = NULL;
//}

//class Base {
//public:
//	// 纯虚函数 -- 只要有一个纯虚函数，这个类就被称为抽象类
//	virtual void func() = 0;
//};
//class Son :public Base {
//	virtual void func(){
//		cout << "func()调用" << endl;
//	}
//};
//void test01() {
//	//Base b1;     // 报错，抽象类无法实例化对象，无论在栈区还是堆区
//	Son s1;
//	Base* base = new Son;
//	base->func();
//	delete base;
//	base = nullptr;
//}

//class AbsgtractDrinking {
//public:
//	// 煮水
//	virtual void Boil() = 0;
//	// 冲泡
//	virtual void Brew() = 0;
//	// 倒入杯中
//	virtual void PourIntoCup() = 0;
//	// 加入辅料
//	virtual void AddSth() = 0;
//	// 制作饮品
//	void MakeDrink() {
//		Boil();
//		Brew();
//		PourIntoCup();
//		AddSth();
//	}
//};
//// 制作咖啡
//class Coffee :public AbsgtractDrinking {
//public:
//	void Boil() {
//		cout << "烧农夫山泉" << endl;
//	}
//	void Brew() {
//		cout << "冲泡咖啡" << endl;
//	}
//	void PourIntoCup() {
//		cout << "倒入杯中" << endl;
//	}
//	void AddSth() {
//		cout << "加入糖和牛奶" << endl;
//	}
//};
//// 制作茶
//class Tea :public AbsgtractDrinking {
//public:
//	void Boil() {
//		cout << "烧矿泉水" << endl;
//	}
//	void Brew() {
//		cout << "冲泡茶叶" << endl;
//	}
//	void PourIntoCup() {
//		cout << "倒入杯中" << endl;
//	}
//	void AddSth() {
//		cout << "加入枸杞" << endl;
//	}
//};
//// 制作
//void doWork(AbsgtractDrinking* abs) {
//	abs->MakeDrink();
//	delete abs;
//}
//void test01() {
//	doWork(new Coffee);
//	doWork(new Tea);
//}
class Animal {
public:
	Animal() {
		cout << "Animal构造" << endl;
	}
	virtual void speak() = 0;
	~Animal() {
		cout << "Animal析构" << endl;
	}
};
class Cat :public Animal{
public:
	Cat(string name) {
		cout << "Cat构造" << endl;
		Name = new string(name);
	}
	virtual void speak() {
		cout << *Name << "在说话" << endl;
	}
	~Cat() {
		cout << "Cat析构" << endl;
		if (Name != NULL) {
			delete Name;
			Name = NULL;
		}
	}
	string* Name;
};
void test01() {
	Animal* animal = new Cat("Tom");
	animal->speak();
	delete animal;
}
int main() {
	test01();
	system("pause");
}
